package Basic;
import java.util.Scanner;

import BasicTreeNecessity.QueueUsingLL;


public class BinaryTreeUse {

	public static void main(String[] args) {

//		BinaryTreeNode<Integer> root = new BinaryTreeNode<>(1);
//		BinaryTreeNode<Integer> node1 = new BinaryTreeNode<>(2);
//		root.left = node1;
//		BinaryTreeNode<Integer> node2 = new BinaryTreeNode<>(3);
//		root.right = node2;
//		System.out.println();

		
//		/******* taking input and printing
		Scanner sc = new Scanner(System.in);
		BinaryTreeNode<Integer> root = takeInput(sc);
		printTree(root);
		sc.close();
	}
	
	public static BinaryTreeNode<Integer> takeInput(Scanner sc){
		int rootData;
		System.out.println("Enter the root data");
		rootData = sc.nextInt();
		if(rootData == -1) {
			return null;
		}
		
		BinaryTreeNode<Integer> root = new BinaryTreeNode<Integer>(rootData);
		root.left = takeInput(sc);
		root.right = takeInput(sc);
		
		return root;
	}
	
	public static void printTree(BinaryTreeNode<Integer> root) {
		if(root == null) {
			return;
		}
		String toBePrinted = root.data + "";
		if(root.left != null) {
			toBePrinted += "L:" + root.left.data + ",";
		}
		if(root.right != null) {
			toBePrinted += "R:" + root.right.data + ",";
		}
		System.out.println(toBePrinted);
		printTree(root.left);
		printTree(root.right);
	}
	
	public static BinaryTreeNode<Integer> takeInputLevelWise(){
		Scanner sc = new Scanner (System.in);
		QueueUsingLL<BinaryTreeNode<Integer>> pendingNodes = new QueueUsingLL<>();
		System.out.println("Eneter the root data");
		int rootData = sc.nextInt();
		
		if(rootData == -1) {
			return null;
		}
		BinaryTreeNode<Integer> root = new BinaryTreeNode<>(root);
		pendingNodes.enqueue(root);
		
		
	}
	

}
